generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NOVO: Enum para os cargos de usuário
enum Role {
  USER
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]
  posts     Post[] // <-- Adicione esta linha para a relação um-para-muitos
profileImageUrl String?  // <-- ADICIONE ESTA LINHA
  // NOVO CAMPO ADICIONADO AQUI
  role      Role     @default(USER) // Por padrão, todo novo usuário é um 'USER'
}

enum Status {
  PENDENTE
  EM_ANDAMENTO
  CONCLUIDA
}

enum Priority {
  BAIXA
  MEDIA
  ALTA
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  status      Status    @default(PENDENTE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  userId      Int
  user        User      @relation(fields: [userId], references: [id])

  priority    Priority  @default(MEDIA)
  dueDate     DateTime?
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String   // Título obrigatório
  content   String   // Conteúdo obrigatório (para textos maiores, o tipo String geralmente é suficiente em Postgres)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId  Int      // Chave estrangeira para o User
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade) // Relacionamento com User
                     // onDelete: Cascade significa que se o User for deletado, seus Posts também serão.

  @@map("posts") // Mapeia para a tabela "posts" no banco de dados (opcional, mas boa prática)
}